#!/bin/perl
#
# https://github.com/hlc926/gto
# BSD 3-Clause "New" or "Revised" License

use Expect; 
# 'perl-Expect'  # maybe you need to install

# $exp = new Expect;  #new一个Expect.
# $exp->spawn($command,@params);  #fork和exec一个新进程用来执行$command命令.
# $exp->expect($timeout,$content); #在$timeout内,期待出现包含$content的内容,默认是精确匹配,
# 	返回值($pos, $err, $match, $before, $after ) 
# 	$pos 在标量环境中的返回值(匹配为1 超时为空'')，
# 	$err 是出错信息，
# 	$match 为成功匹配的字串，
# 	$before 为匹配字串之前的输出部分，
# 	$after 为匹配字串之后的输出部分
#		$ept->send("$str\n") if (($ept->expect($timeout, $fcur))[0] > 0);
#		$ept->send("$str\n") if $ept->expect($timeout, $fcur); 这种写法无论是否匹配都发送
# $exp->send($string);  #向终端发送字符
# $exp->debug(0|1|2);  #打印debug 信息,不同的数字表示不同的bug级别
# $exp->interact();   #和用户进行交互,把控制权转交给用户
# $exp->soft_close();  #软关闭,直到$timeout时间到达,才关掉该进程
# $exp->hard_close();  #硬关闭,立刻关闭该进程
# $exp->match();   #返回匹配的结果
# $exp->match_number(); #返回匹配的个数

if (scalar(@ARGV) < 1) {
	print "可以通过标帜(ip-port-user or 别名 or 路由)登录.\n"; #
	print "usage: $0 <lflag>	## lflag 登录标帜\n";
	print "usage: $0 -showlflag	## 显示所有可用于登录的标帜\n";
	print "usage: $0 -showhosts	## 显示所有配置的主机信息\n";
	print "usage: $0 -showalias	## 显示所有配置的主机别名\n";
	print "usage: $0 -scp hostsrc:/path/filesrc hostobj:/path/[fileobj] #scp. 将机器hostsrc的/path目录下的文件filesrc scp到机器hostobj的/path/[fileobj]\n";
	exit;
}

if ($0 =~ /(.+)\/.+/) { 
	$pathapp = $1;
}

$obj = shift;

$bgn = 2;	# 路由是从下标2 (step1)开始," ===== obj step1 ... "

init_hosts_file(); # 读入hosts文件 ==> %halias %hhosts %hroute

if ($obj eq "-showlflag") {
	sub_show_route();
} elsif ($obj eq "-showhosts") {
	sub_show_hosts();
} elsif ($obj eq "-showalias") {
	sub_show_alias();
} elsif ($obj eq "-scp") {
	$strsrc = shift;
	$strobj = shift;
	if (!defined($strsrc) || !defined($strobj)) {
		print "-scp need strsrc strobj \n";
		exit;
	}
	$timeout = 3600;	# > 拷贝大文件的时长
	sub_scp();
} else {
	$timeout = 30;
	sub_ssh();
}

exit;

##############
sub sub_show_route {
	print "=====\t======登录标帜=====\t=====路由or登录信息=====\n";
	foreach(sort(keys(%hroute))) {
		print $hroute{$_};
	}
}
sub sub_show_hosts {
	foreach(sort(keys(%hhosts))) {
		print "$_	$hhosts{$_}->[0]	$hhosts{$_}->[1]\n";
	}
}
sub sub_show_alias {
	foreach(sort(keys(%halias))) {
		print "$_	$halias{$_}\n";
	}
}
sub init_hosts_file {
# 读入hosts文件 %halias %hhosts %hroute
	#
	open(HF, "$pathapp/knownhosts") or die "open $pathapp/knownhosts err";
	while($line = <HF>) {
		if ($line =~ /^===\s+/) {
			@sp = split('\s+', $line);

			if ($sp[2] eq "-") {
				print "err ip 地址必需: $line \n";
				exit;
			}
			$port = $sp[3];
			$port = "22" if ($port eq "-");
			$key = "$sp[2]-$port-$sp[4]";

			if ($sp[1] ne "-") {
				if (!defined($halias{$sp[1]})) {
					$halias{$sp[1]} = $key;
				} else {
					print "重复别名: $line";
					exit;
				}
				$str = "=====	$sp[1]	$key\n";	# 模拟路由信息
				insert_rt($sp[1], $str);	# 别名加入路由信息
			}
			if (!defined($hhosts{$key})) {
				$hhosts{$key}->[0] = $sp[2];	# ip
				$hhosts{$key}->[1] = $port;		# port
				$hhosts{$key}->[2] = $sp[4];	# user
				$hhosts{$key}->[3] = $sp[5];	# 前标志
				$hhosts{$key}->[4] = $sp[6];	# 密码
				$hhosts{$key}->[5] = $sp[7];	# 后标志
				$hhosts{$key}->[6] = $sp[8];	# 命令
				$hhosts{$key}->[7] = $sp[9];	# ssh参数

				$str = "=====	$key	$key\n";	# 模拟路由信息
				insert_rt($key, $str);	# 别名加入路由信息

			} else {
				print "重复ip-port-user: $line";
				exit;
			}

		} elsif ($line =~ /^=====\s+/) {
			@sp = split('\s+', $line);

			insert_rt($sp[1], $line);

			$cnt = scalar(@sp);
			for ($i = $bgn + 1; $i < $cnt - 1; $i++) { # 对中间机器替换路由信息
				$key = $sp[$i];
				$str = "";
				for($j = $bgn; $j <= $i; $j++) {
					$str .= "	$sp[$j]";
				}

				$str = "=====	$key $str\n";	# 模拟路由信息
				insert_rt($key, $str);	# 加入路由信息
			}
		}
	}
	close(HF);
}

sub insert_rt {
	my $mykey = shift;
	my $myvalue = shift;

	$hroute{$mykey} = $myvalue;
}

sub is_same_ipport {
	my $hosta = shift;
	my $hostb = shift;

	my $host = get_real_host($hosta);
	if (!defined($hhosts{$host})) {
		print "is_same_ipport unknow to login [$host]\n";
		exit;
	}
	my $ip = $hhosts{$host}->[0];
	my $port = $hhosts{$host}->[1];

	$host = get_real_host($hostb);
	if (!defined($hhosts{$host})) {
		print "is_same_ipport unknow to login [$host]\n";
		exit;
	}
	my $ip2 = $hhosts{$host}->[0];
	my $port2 = $hhosts{$host}->[1];

	if ($ip eq $ip2 && $port eq $port2) {
		return 1;
	} else {
		return 0;
	}
}

sub get_real_host {	# ip-port-user
	my $host = shift;

	if (defined($halias{$host})) {
		$host = $halias{$host};
	}

	return $host;
}

sub login_to {	# 登录主机 alia|ip-port-user
				# hostd 	spawn:1		fcur 	执行命令flag:1
				# 返回当前登录标帜 fa
	my $host = shift;
	my $spawn = shift;
	my $fcur = shift;
	my $flag = shift;

	$host = get_real_host($host);
#	print "########login_to	[$host]\n";

	if (!defined($hhosts{$host})) {
		print "login_to unknow to login [$host]\n";
		exit;
	}
	my $ip = $hhosts{$host}->[0];
	my $port = $hhosts{$host}->[1];
	my $user = $hhosts{$host}->[2];
	my $fb = $hhosts{$host}->[3];
	my $passwd = $hhosts{$host}->[4];
	my $fa = $hhosts{$host}->[5];
	my $cmd = $hhosts{$host}->[6];
	my $param = $hhosts{$host}->[7];

	$param =~ s/#/ /g;
	$param = "" if ($param eq "-");

	my $str = "ssh $param -l $user $ip -p $port";
#	print "[$str]\n";

	if ($spawn eq "1") {
		$ept = Expect->spawn("$str\n") or die $!;
	} else {
		$ept->send("$str\n") if (($ept->expect($timeout, $fcur))[0] > 0);
	}

	if ($passwd ne "-" && $passwd ne "?") {
		$ept->expect($timeout, 
			['(yes/no)', sub {$ept->send("yes\n"); exp_continue;}],
			[$fb, sub {$ept->send("$passwd\n");}],
		);
	}
		
	if ($flag == 1) {
		$cmd =~ s/#/ /g;
		if ($cmd ne "-") {
			$ept->send("$cmd\n") if (($ept->expect($timeout, $fa))[0] > 0);
		}
	}

	return $fa;
}

sub sub_ssh {
	route_to($obj);
	$ept->interact();  #	把控制权转交给用户
}

sub route_to { 		#	可以通过 别名、ip-port-user、路由  登录.\n";
	my $obj = shift;
	my $routes = $hroute{$obj};
	if (!defined($routes)) {
		print "sub_ssh unknow to login [$obj]\n";
		exit;
	}
	my @sp = split('\s+', $routes);
	my $cnt = scalar(@sp);

	my $i; my $spawn; my $fcur;
	for ($i = $bgn; $i < $cnt; $i++) {	# 登录的主机从第一个即step1开始
		if ($i == $bgn) {
			$spawn = 1;
		} else {
			$spawn = 0;
		}

		$fcur = login_to($sp[$i], $spawn, $fcur, 1);
	}

	return $fcur;
}

sub sub_scp {
	# 路由 vecrt[][] cntrt[], hostsrc pathsrc filesrc hostobj pathobj fileobj
	sub_scp_init();

	# 因为机器可能不能连通，所以登录transit作为中转
	#	$fcur = login_to("transit", 1, $fcur, 0);
	$fcur = route_to("transit");

	#从后一机器(npos)取文件到当前机器		 #递归函数
	$pathmid = "/tmp";
	if ($cntrt[0] == 1 && is_same_ipport($vecrt[0][0], "transit") == 1) {
		$pathmid = $pathsrc;		# 	源就是transit
	} elsif (is_same_ipport($vecrt[0][0], "transit") == 1) { # step1是transit
		get_file_from(1, $fcur); 
	} else {
		get_file_from(0, $fcur); 
	}
#	print "pathmid[$pathmid]\n";

	# 从当前机器的pathmid目录拷贝到后一机器(npos)	 #递归函数
	if ($cntrt[1] == 1 && is_same_ipport($vecrt[1][0], "transit") == 1) {
		if ($pathmid ne $pathobj || $filesrc ne $fileobj) {
			$ept->send("cp -f $pathmid/$filesrc $pathobj/$fileobj;\n") if (($ept->expect($timeout, $fcur))[0] > 0);
		}
	} elsif (is_same_ipport($vecrt[1][0], "transit") == 1) { # step1是transit
		cp_file_to($pathmid, 1, $fcur);
	} else {
		cp_file_to($pathmid, 0, $fcur);
	}

	$ept->send("exit;\n") if (($ept->expect($timeout, $fcur))[0] > 0);
	print "[$strsrc]===>[$strobj]\ndone!\n";
}

sub cp_file_to { # 从当前机器的pathmid目录拷贝到后一机器(npos)	 #递归函数
	my $pathmid = shift;
	my $npos = shift;
	my $fcur = shift;
	my $nhost = $vecrt[1][$npos];
#	print "####### cp_file_to [$npos][$nhost]\n";

	$nhost = get_real_host($nhost);
	if (!defined($hhosts{$nhost})) {
		print "cp_file_to unknow to login [$nhost]\n";
		exit;
	}
	my $ip = $hhosts{$nhost}->[0];
	my $port = $hhosts{$nhost}->[1];
	my $user = $hhosts{$nhost}->[2];
	my $fb = $hhosts{$nhost}->[3];
	my $passwd = $hhosts{$nhost}->[4];

	my $path = "/tmp";
	$path = $pathobj if ($npos == $cntrt[1] - 1);	# 目标机器
	my $file = $filesrc;
	$file = $fileobj if ($npos == $cntrt[1] - 1);   # 目标机器

	my $str = "scp -P $port $pathmid/$filesrc $user\@$ip:$path/$file; ";
#	print "####### [$npos] [$cntrt[1]] [$nhost]\n#######[$str]\n";
	$ept->send("$str\n") if (($ept->expect($timeout, $fcur))[0] > 0);
	if ($passwd ne "-") {
		$ept->expect($timeout, 
			['(yes/no)', sub {$ept->send("yes\n"); exp_continue;}],
			[$fb, sub {$ept->send("$passwd\n");}],
		);
	}

	if ($npos < $cntrt[1] - 1) {	# 后一台不是最后一台机器
		my $fnew = login_to($nhost, 0, $fcur, 0);
		cp_file_to("/tmp", $npos + 1, $fnew);	
		$ept->send("exit;\n") if (($ept->expect($timeout, $fnew))[0] > 0);
	}
}

sub get_file_from { 	#从后一机器(npos)取文件到当前机器的"/tmp" #递归函数
	my $npos = shift;
	my $fcur = shift;
	my $nhost = $vecrt[0][$npos];
#	print "####### get_file_from [$npos][$nhost]\n";

	if ($npos < $cntrt[0] - 1) {	# 后一台不是最后一台机器
		my $fnew = login_to($nhost, 0, $fcur, 0);
		get_file_from($npos + 1, $fnew);	
		$ept->send("exit;\n") if (($ept->expect($timeout, $fnew))[0] > 0);
	}

	$nhost = get_real_host($nhost);
	if (!defined($hhosts{$nhost})) {
		print "get_file_from unknow to login [$nhost]\n";
		exit;
	}
	my $ip = $hhosts{$nhost}->[0];
	my $port = $hhosts{$nhost}->[1];
	my $user = $hhosts{$nhost}->[2];
	my $fb = $hhosts{$nhost}->[3];
	my $passwd = $hhosts{$nhost}->[4];

	my $path = "/tmp";
	$path = $pathsrc if ($npos == $cntrt[0] - 1);	# 源机器

	my $str = "scp -P $port $user\@$ip:$path/$filesrc /tmp/; ";
#	print "####### [$npos] $cntrt[0]] [$nhost]\n#######[$str]\n";
	$ept->send("$str\n") if (($ept->expect($timeout, $fcur))[0] > 0);
	if ($passwd ne "-") {
		$ept->expect($timeout, 
			['(yes/no)', sub {$ept->send("yes\n"); exp_continue;}],
			[$fb, sub {$ept->send("$passwd\n");}],
		);
	}
}



sub sub_scp_init {	
	# 路由 vecrt[][] cntrt[], hostsrc pathsrc filesrc hostobj pathobj fileobj
	#
	# hostsrc:path/filesrc hostobj:path[/fileobj]  ## scp\n";
	get_scp_info($strsrc);
	$hostsrc = $resvec[0];
	$pathsrc = $resvec[1];
	$filesrc = $resvec[2];
	if ($hostsrc eq "" || $pathsrc eq "" || $filesrc eq "") {
		print "hostsrc[$hostsrc] or pathsrc[$pathsrc] or filesrc[$filesrc] can not be empty\n";
		exit;
	}

	get_scp_info($strobj);
	$hostobj = $resvec[0];
	$pathobj = $resvec[1];
	$fileobj = $resvec[2];
	$fileobj = $filesrc if ($fileobj eq "");
	if ($hostobj eq "" || $pathobj eq "" || $fileobj eq "") {
		print "hostobj[$hostobj] or pathobj[$pathobj] or fileobj[$fileobj] can not be empty\n";
		exit;
	}
	if ($hostsrc eq $hostobj) {
		print "hostobj[$hostobj] == pathobj[$pathobj] \n";
		exit;
	}

#	print "[$hostsrc][$pathsrc][$filesrc]	[$hostobj][$pathobj][$fileobj]\n";	
#
	get_host_vec($hostsrc, 0);
	get_host_vec($hostobj, 1);
}

sub get_host_vec { 	# 路由读入 vecrt[][] cntrt[] 
	my $hosttmp = shift;
	my $pos = shift;

	$routes = $hroute{$hosttmp};
	if (!defined($routes)) {
		print "get_host_vec unknow to login [$hosttmp]\n";
		exit;
	}
	@sp = split('\s+', $routes);
	$cnt = scalar(@sp);

	$cntrt[$pos] = 0;
	for ($i = $bgn; $i < $cnt; $i++) {
		$vecrt[$pos][$cntrt[$pos]] = $sp[$i];
		$cntrt[$pos]++;
	}
}

sub get_scp_info {	# 根据输入的str 得到 host path file 放入 resvec[]
	my $mystr = shift;
	my @mysp;
	my $mycnt;
	my $mytmp;

	# [hostsrc:]path/filesrc [hostobj:]path[/fileobj]  ## scp\n";
	@mysp =split(/:/, $mystr);
	$mycnt = scalar(@mysp);
	if ($mycnt == 1) {
		$resvec[0] = "";
		$mytmp = $mysp[0];
	} elsif ($mycnt == 2) {
		$resvec[0] = $mysp[0];
		$mytmp = $mysp[1];
	} else {
		print "err more : [$mystr]\n";
		exit;
	}

	if (substr($mytmp, length($mytmp) - 1, 1) eq "/") {
		$resvec[1] = $mytmp;
		$resvec[2] = "";
	} else {
		@mysp =split(/\//, $mytmp);
		$mycnt = scalar(@mysp);
		if ($mycnt == 1) {
			$resvec[1] = $mysp[0];
			$resvec[2] = "";
		} else {
			$resvec[2] = $mysp[$mycnt -1];
			$mysp[$mycnt -1] = "";
			$resvec[1] = join("/", @mysp);
		}
	}
}

######################################### 
